#include <iostream>
#include <SDL.h>
#include <SDL_mixer.h>
using namespace std;

class Sound{
    private:
        Song* mixed_song;
    public:
        sound();
        ~sound();

        bool initialize();
        bool loadSound(const string& filepath)
        void playsound();
        void playSoundOnLoop();
        void stopSound();
};
Sound::playsound():mixed_song(nullptr){}
SoundPlayer::~SoundPlayer() {
    stopSound();
    Mix_CloseAudio();
    SDL_Quit();
}
bool Sound::initialize(){
    //to check error use this inbuilt flag
    if (SDL_Init(SDL_INIT_AUDIO)<0){
        cout << "SDL initialization error: " << SDL_GetError() <<endl;
        return false;
    }
    if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048) < 0) {
        cout << "SDL_mixer initialization error: " << Mix_GetError() << std::endl;
        return false;
    }
    
    return true;
    
}
bool Sound::loadSound(const string& filePath) {
    dictionary{}
    mixed_song = Mix_LoadMUS(filePath.c_str());
    if (!mixed_song) {
        cout << "Unable to load music: " << Mix_GetError() << endl;
        return false;
    }
    return true;
}
void SoundPlayer::playSound() {
    if (mixed_song) {
        Mix_PlayMusic(mixed_music, 0);
    }
}
void SoundPlayer::playSoundOnLoop() {
    if (mixed_song) {
        Mix_PlayMusic(mixed_music, -1); // -1 plays the music in an infinite loop
    }
}
void SoundPlayer::stopSound() {
    if (mixed_song) {
        Mix_FreeMusic(mixed_song);
        mixed_song= nullptr;
    }
}
